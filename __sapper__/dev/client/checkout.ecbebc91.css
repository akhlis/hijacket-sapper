.autocomplete.svelte-1ssegu4.svelte-1ssegu4{min-width:200px}.autocomplete.svelte-1ssegu4 .svelte-1ssegu4{-webkit-box-sizing:border-box;box-sizing:border-box}.autocomplete-input.svelte-1ssegu4.svelte-1ssegu4{font:inherit;width:100%;height:100%;padding:5px 11px}.autocomplete-list.svelte-1ssegu4.svelte-1ssegu4{max-height:calc(15 * (1rem + 10px) + 15px);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.autocomplete-list.svelte-1ssegu4.svelte-1ssegu4:empty{padding:0}.autocomplete-list-item.selected.svelte-1ssegu4.svelte-1ssegu4{--text-opacity:1;color:#f57224;color:rgba(245, 114, 36, var(--text-opacity));--bg-opacity:1;background-color:#fffaf0;background-color:rgba(255, 250, 240, var(--bg-opacity));border-left-width:2px;border-right-width:2px;border-style:solid;--border-opacity:1;border-color:#f57224;border-color:rgba(245, 114, 36, var(--border-opacity))}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */