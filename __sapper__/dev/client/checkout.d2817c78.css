.autocomplete.svelte-jkyeld.svelte-jkyeld{min-width:200px}.autocomplete.svelte-jkyeld .svelte-jkyeld{-webkit-box-sizing:border-box;box-sizing:border-box}.autocomplete-input.svelte-jkyeld.svelte-jkyeld{font:inherit;width:100%;height:100%;padding:5px 11px}.autocomplete-list.svelte-jkyeld.svelte-jkyeld{max-height:calc(15 * (1rem + 10px) + 15px);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.autocomplete-list.svelte-jkyeld.svelte-jkyeld:empty{padding:0}.autocomplete-list-item.selected.svelte-jkyeld.svelte-jkyeld{--text-opacity:1;color:#38b2ac;color:rgba(56, 178, 172, var(--text-opacity));--bg-opacity:1;background-color:#f0fff4;background-color:rgba(240, 255, 244, var(--bg-opacity))}.autocomplete-list-item-no-results.svelte-jkyeld.svelte-jkyeld{padding:5px 15px;color:#999;line-height:1}.autocomplete-list.hidden.svelte-jkyeld.svelte-jkyeld{display:none}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */