.autocomplete.svelte-1fwovfc.svelte-1fwovfc{min-width:200px}.autocomplete.svelte-1fwovfc .svelte-1fwovfc{-webkit-box-sizing:border-box;box-sizing:border-box}.autocomplete-input.svelte-1fwovfc.svelte-1fwovfc{font:inherit;width:100%;height:100%;padding:5px 11px}.autocomplete-list.svelte-1fwovfc.svelte-1fwovfc{background:#fff;position:relative;width:100%;overflow-y:auto;z-index:99;padding:10px 0;top:0px;border:1px solid #999;max-height:calc(15 * (1rem + 10px) + 15px);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.autocomplete-list.svelte-1fwovfc.svelte-1fwovfc:empty{padding:0}.autocomplete-list-item.svelte-1fwovfc.svelte-1fwovfc{padding:5px 15px;color:#333;cursor:pointer;line-height:1}.autocomplete-list-item.svelte-1fwovfc.svelte-1fwovfc:hover,.autocomplete-list-item.selected.svelte-1fwovfc.svelte-1fwovfc{background-color:#2e69e2;color:#fff}.autocomplete-list-item-no-results.svelte-1fwovfc.svelte-1fwovfc{padding:5px 15px;color:#999;line-height:1}.autocomplete-list.hidden.svelte-1fwovfc.svelte-1fwovfc{display:none}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */